// Generated by gencpp from file mapdata/CDMSection.msg
// DO NOT EDIT!


#ifndef MAPDATA_MESSAGE_CDMSECTION_H
#define MAPDATA_MESSAGE_CDMSECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mapdata/Position.h>
#include <mapdata/CDMConnectionZone.h>

namespace mapdata
{
template <class ContainerAllocator>
struct CDMSection_
{
  typedef CDMSection_<ContainerAllocator> Type;

  CDMSection_()
    : id(0)
    , pos()
    , type(0)
    , width(0)
    , height(0)
    , orientation(0)
    , connection_zones()  {
    }
  CDMSection_(const ContainerAllocator& _alloc)
    : id(0)
    , pos(_alloc)
    , type(0)
    , width(0)
    , height(0)
    , orientation(0)
    , connection_zones(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef  ::mapdata::Position_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _orientation_type;
  _orientation_type orientation;

   typedef std::vector< ::mapdata::CDMConnectionZone_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mapdata::CDMConnectionZone_<ContainerAllocator> >::other >  _connection_zones_type;
  _connection_zones_type connection_zones;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(THREE_WAY_INTERSECTION)
  #undef THREE_WAY_INTERSECTION
#endif
#if defined(_WIN32) && defined(FOUR_WAY_INTERSECTION)
  #undef FOUR_WAY_INTERSECTION
#endif
#if defined(_WIN32) && defined(THREE_WAY_ROUNDABOUT)
  #undef THREE_WAY_ROUNDABOUT
#endif
#if defined(_WIN32) && defined(NORTH)
  #undef NORTH
#endif
#if defined(_WIN32) && defined(SOUTH)
  #undef SOUTH
#endif
#if defined(_WIN32) && defined(EAST)
  #undef EAST
#endif
#if defined(_WIN32) && defined(WEST)
  #undef WEST
#endif

  enum {
    THREE_WAY_INTERSECTION = 0u,
    FOUR_WAY_INTERSECTION = 1u,
    THREE_WAY_ROUNDABOUT = 2u,
    NORTH = 0u,
    SOUTH = 1u,
    EAST = 2u,
    WEST = 3u,
  };


  typedef boost::shared_ptr< ::mapdata::CDMSection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mapdata::CDMSection_<ContainerAllocator> const> ConstPtr;

}; // struct CDMSection_

typedef ::mapdata::CDMSection_<std::allocator<void> > CDMSection;

typedef boost::shared_ptr< ::mapdata::CDMSection > CDMSectionPtr;
typedef boost::shared_ptr< ::mapdata::CDMSection const> CDMSectionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mapdata::CDMSection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mapdata::CDMSection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mapdata::CDMSection_<ContainerAllocator1> & lhs, const ::mapdata::CDMSection_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.pos == rhs.pos &&
    lhs.type == rhs.type &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.orientation == rhs.orientation &&
    lhs.connection_zones == rhs.connection_zones;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mapdata::CDMSection_<ContainerAllocator1> & lhs, const ::mapdata::CDMSection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mapdata

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mapdata::CDMSection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mapdata::CDMSection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapdata::CDMSection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapdata::CDMSection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapdata::CDMSection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapdata::CDMSection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mapdata::CDMSection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84a37099866d8390b55fd98c37e4e716";
  }

  static const char* value(const ::mapdata::CDMSection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84a37099866d8390ULL;
  static const uint64_t static_value2 = 0xb55fd98c37e4e716ULL;
};

template<class ContainerAllocator>
struct DataType< ::mapdata::CDMSection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mapdata/CDMSection";
  }

  static const char* value(const ::mapdata::CDMSection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mapdata::CDMSection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Type enumeration\n"
"uint8 THREE_WAY_INTERSECTION=0\n"
"uint8 FOUR_WAY_INTERSECTION=1\n"
"uint8 THREE_WAY_ROUNDABOUT=2\n"
"\n"
"# Orientation enumeration\n"
"uint8 NORTH=0\n"
"uint8 SOUTH=1\n"
"uint8 EAST=2\n"
"uint8 WEST=3\n"
"\n"
"\n"
"int32 id\n"
"Position pos\n"
"int32 type\n"
"int32 width\n"
"int32 height\n"
"int32 orientation\n"
"CDMConnectionZone[] connection_zones\n"
"\n"
"================================================================================\n"
"MSG: mapdata/Position\n"
"int32 x\n"
"int32 y\n"
"\n"
"================================================================================\n"
"MSG: mapdata/CDMConnectionZone\n"
"Position pos\n"
"uint32 width\n"
"uint32 height\n"
;
  }

  static const char* value(const ::mapdata::CDMSection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mapdata::CDMSection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pos);
      stream.next(m.type);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.orientation);
      stream.next(m.connection_zones);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CDMSection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mapdata::CDMSection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mapdata::CDMSection_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::mapdata::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "orientation: ";
    Printer<int32_t>::stream(s, indent + "  ", v.orientation);
    s << indent << "connection_zones[]" << std::endl;
    for (size_t i = 0; i < v.connection_zones.size(); ++i)
    {
      s << indent << "  connection_zones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mapdata::CDMConnectionZone_<ContainerAllocator> >::stream(s, indent + "    ", v.connection_zones[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAPDATA_MESSAGE_CDMSECTION_H
