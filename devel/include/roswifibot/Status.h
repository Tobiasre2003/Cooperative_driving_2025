// Generated by gencpp from file roswifibot/Status.msg
// DO NOT EDIT!


#ifndef ROSWIFIBOT_MESSAGE_STATUS_H
#define ROSWIFIBOT_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roswifibot
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : battery_level(0.0)
    , current(0.0)
    , ADC1(0)
    , ADC2(0)
    , ADC3(0)
    , ADC4(0)
    , speed_front_left(0.0)
    , speed_front_right(0.0)
    , odometry_left(0.0)
    , odometry_right(0.0)
    , version(0)
    , relay1(0)
    , relay2(0)
    , relay3(0)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : battery_level(0.0)
    , current(0.0)
    , ADC1(0)
    , ADC2(0)
    , ADC3(0)
    , ADC4(0)
    , speed_front_left(0.0)
    , speed_front_right(0.0)
    , odometry_left(0.0)
    , odometry_right(0.0)
    , version(0)
    , relay1(0)
    , relay2(0)
    , relay3(0)  {
  (void)_alloc;
    }



   typedef double _battery_level_type;
  _battery_level_type battery_level;

   typedef double _current_type;
  _current_type current;

   typedef int32_t _ADC1_type;
  _ADC1_type ADC1;

   typedef int32_t _ADC2_type;
  _ADC2_type ADC2;

   typedef int32_t _ADC3_type;
  _ADC3_type ADC3;

   typedef int32_t _ADC4_type;
  _ADC4_type ADC4;

   typedef double _speed_front_left_type;
  _speed_front_left_type speed_front_left;

   typedef double _speed_front_right_type;
  _speed_front_right_type speed_front_right;

   typedef double _odometry_left_type;
  _odometry_left_type odometry_left;

   typedef double _odometry_right_type;
  _odometry_right_type odometry_right;

   typedef int32_t _version_type;
  _version_type version;

   typedef int8_t _relay1_type;
  _relay1_type relay1;

   typedef int8_t _relay2_type;
  _relay2_type relay2;

   typedef int8_t _relay3_type;
  _relay3_type relay3;





  typedef boost::shared_ptr< ::roswifibot::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roswifibot::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::roswifibot::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::roswifibot::Status > StatusPtr;
typedef boost::shared_ptr< ::roswifibot::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roswifibot::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roswifibot::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roswifibot::Status_<ContainerAllocator1> & lhs, const ::roswifibot::Status_<ContainerAllocator2> & rhs)
{
  return lhs.battery_level == rhs.battery_level &&
    lhs.current == rhs.current &&
    lhs.ADC1 == rhs.ADC1 &&
    lhs.ADC2 == rhs.ADC2 &&
    lhs.ADC3 == rhs.ADC3 &&
    lhs.ADC4 == rhs.ADC4 &&
    lhs.speed_front_left == rhs.speed_front_left &&
    lhs.speed_front_right == rhs.speed_front_right &&
    lhs.odometry_left == rhs.odometry_left &&
    lhs.odometry_right == rhs.odometry_right &&
    lhs.version == rhs.version &&
    lhs.relay1 == rhs.relay1 &&
    lhs.relay2 == rhs.relay2 &&
    lhs.relay3 == rhs.relay3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roswifibot::Status_<ContainerAllocator1> & lhs, const ::roswifibot::Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roswifibot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roswifibot::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roswifibot::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roswifibot::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roswifibot::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roswifibot::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roswifibot::Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roswifibot::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d55c85d21aaf2691ac6422ea4770a7d3";
  }

  static const char* value(const ::roswifibot::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd55c85d21aaf2691ULL;
  static const uint64_t static_value2 = 0xac6422ea4770a7d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::roswifibot::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roswifibot/Status";
  }

  static const char* value(const ::roswifibot::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roswifibot::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 battery_level\n"
"float64 current\n"
"int32 ADC1\n"
"int32 ADC2\n"
"int32 ADC3\n"
"int32 ADC4\n"
"float64 speed_front_left\n"
"float64 speed_front_right\n"
"float64 odometry_left\n"
"float64 odometry_right\n"
"int32 version\n"
"int8 relay1\n"
"int8 relay2\n"
"int8 relay3\n"
;
  }

  static const char* value(const ::roswifibot::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roswifibot::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.battery_level);
      stream.next(m.current);
      stream.next(m.ADC1);
      stream.next(m.ADC2);
      stream.next(m.ADC3);
      stream.next(m.ADC4);
      stream.next(m.speed_front_left);
      stream.next(m.speed_front_right);
      stream.next(m.odometry_left);
      stream.next(m.odometry_right);
      stream.next(m.version);
      stream.next(m.relay1);
      stream.next(m.relay2);
      stream.next(m.relay3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roswifibot::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roswifibot::Status_<ContainerAllocator>& v)
  {
    s << indent << "battery_level: ";
    Printer<double>::stream(s, indent + "  ", v.battery_level);
    s << indent << "current: ";
    Printer<double>::stream(s, indent + "  ", v.current);
    s << indent << "ADC1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ADC1);
    s << indent << "ADC2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ADC2);
    s << indent << "ADC3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ADC3);
    s << indent << "ADC4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ADC4);
    s << indent << "speed_front_left: ";
    Printer<double>::stream(s, indent + "  ", v.speed_front_left);
    s << indent << "speed_front_right: ";
    Printer<double>::stream(s, indent + "  ", v.speed_front_right);
    s << indent << "odometry_left: ";
    Printer<double>::stream(s, indent + "  ", v.odometry_left);
    s << indent << "odometry_right: ";
    Printer<double>::stream(s, indent + "  ", v.odometry_right);
    s << indent << "version: ";
    Printer<int32_t>::stream(s, indent + "  ", v.version);
    s << indent << "relay1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.relay1);
    s << indent << "relay2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.relay2);
    s << indent << "relay3: ";
    Printer<int8_t>::stream(s, indent + "  ", v.relay3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSWIFIBOT_MESSAGE_STATUS_H
