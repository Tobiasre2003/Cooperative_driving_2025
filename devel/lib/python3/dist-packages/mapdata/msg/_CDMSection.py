# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mapdata/CDMSection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mapdata.msg

class CDMSection(genpy.Message):
  _md5sum = "84a37099866d8390b55fd98c37e4e716"
  _type = "mapdata/CDMSection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Type enumeration
uint8 THREE_WAY_INTERSECTION=0
uint8 FOUR_WAY_INTERSECTION=1
uint8 THREE_WAY_ROUNDABOUT=2

# Orientation enumeration
uint8 NORTH=0
uint8 SOUTH=1
uint8 EAST=2
uint8 WEST=3


int32 id
Position pos
int32 type
int32 width
int32 height
int32 orientation
CDMConnectionZone[] connection_zones

================================================================================
MSG: mapdata/Position
int32 x
int32 y

================================================================================
MSG: mapdata/CDMConnectionZone
Position pos
uint32 width
uint32 height
"""
  # Pseudo-constants
  THREE_WAY_INTERSECTION = 0
  FOUR_WAY_INTERSECTION = 1
  THREE_WAY_ROUNDABOUT = 2
  NORTH = 0
  SOUTH = 1
  EAST = 2
  WEST = 3

  __slots__ = ['id','pos','type','width','height','orientation','connection_zones']
  _slot_types = ['int32','mapdata/Position','int32','int32','int32','int32','mapdata/CDMConnectionZone[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,pos,type,width,height,orientation,connection_zones

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CDMSection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.pos is None:
        self.pos = mapdata.msg.Position()
      if self.type is None:
        self.type = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.orientation is None:
        self.orientation = 0
      if self.connection_zones is None:
        self.connection_zones = []
    else:
      self.id = 0
      self.pos = mapdata.msg.Position()
      self.type = 0
      self.width = 0
      self.height = 0
      self.orientation = 0
      self.connection_zones = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.id, _x.pos.x, _x.pos.y, _x.type, _x.width, _x.height, _x.orientation))
      length = len(self.connection_zones)
      buff.write(_struct_I.pack(length))
      for val1 in self.connection_zones:
        _v1 = val1.pos
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.width, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos is None:
        self.pos = mapdata.msg.Position()
      if self.connection_zones is None:
        self.connection_zones = None
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.pos.x, _x.pos.y, _x.type, _x.width, _x.height, _x.orientation,) = _get_struct_7i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.connection_zones = []
      for i in range(0, length):
        val1 = mapdata.msg.CDMConnectionZone()
        _v2 = val1.pos
        _x = _v2
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2i().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.width, _x.height,) = _get_struct_2I().unpack(str[start:end])
        self.connection_zones.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.id, _x.pos.x, _x.pos.y, _x.type, _x.width, _x.height, _x.orientation))
      length = len(self.connection_zones)
      buff.write(_struct_I.pack(length))
      for val1 in self.connection_zones:
        _v3 = val1.pos
        _x = _v3
        buff.write(_get_struct_2i().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.width, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos is None:
        self.pos = mapdata.msg.Position()
      if self.connection_zones is None:
        self.connection_zones = None
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.pos.x, _x.pos.y, _x.type, _x.width, _x.height, _x.orientation,) = _get_struct_7i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.connection_zones = []
      for i in range(0, length):
        val1 = mapdata.msg.CDMConnectionZone()
        _v4 = val1.pos
        _x = _v4
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2i().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.width, _x.height,) = _get_struct_2I().unpack(str[start:end])
        self.connection_zones.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_7i = None
def _get_struct_7i():
    global _struct_7i
    if _struct_7i is None:
        _struct_7i = struct.Struct("<7i")
    return _struct_7i
