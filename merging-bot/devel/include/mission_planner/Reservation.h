// Generated by gencpp from file mission_planner/Reservation.msg
// DO NOT EDIT!


#ifndef MISSION_PLANNER_MESSAGE_RESERVATION_H
#define MISSION_PLANNER_MESSAGE_RESERVATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mission_planner
{
template <class ContainerAllocator>
struct Reservation_
{
  typedef Reservation_<ContainerAllocator> Type;

  Reservation_()
    : start()
    , end()  {
    }
  Reservation_(const ContainerAllocator& _alloc)
    : start(_alloc)
    , end(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _start_type;
  _start_type start;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _end_type;
  _end_type end;





  typedef boost::shared_ptr< ::mission_planner::Reservation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mission_planner::Reservation_<ContainerAllocator> const> ConstPtr;

}; // struct Reservation_

typedef ::mission_planner::Reservation_<std::allocator<void> > Reservation;

typedef boost::shared_ptr< ::mission_planner::Reservation > ReservationPtr;
typedef boost::shared_ptr< ::mission_planner::Reservation const> ReservationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mission_planner::Reservation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mission_planner::Reservation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mission_planner::Reservation_<ContainerAllocator1> & lhs, const ::mission_planner::Reservation_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.end == rhs.end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mission_planner::Reservation_<ContainerAllocator1> & lhs, const ::mission_planner::Reservation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mission_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mission_planner::Reservation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mission_planner::Reservation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mission_planner::Reservation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mission_planner::Reservation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mission_planner::Reservation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mission_planner::Reservation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mission_planner::Reservation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd9b411e8e594457e56809ca789fc69e";
  }

  static const char* value(const ::mission_planner::Reservation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd9b411e8e594457ULL;
  static const uint64_t static_value2 = 0xe56809ca789fc69eULL;
};

template<class ContainerAllocator>
struct DataType< ::mission_planner::Reservation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mission_planner/Reservation";
  }

  static const char* value(const ::mission_planner::Reservation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mission_planner::Reservation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string start\n"
"string end\n"
;
  }

  static const char* value(const ::mission_planner::Reservation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mission_planner::Reservation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Reservation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mission_planner::Reservation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mission_planner::Reservation_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MISSION_PLANNER_MESSAGE_RESERVATION_H
