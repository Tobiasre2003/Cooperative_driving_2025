# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mapdata/RoadSection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mapdata.msg

class RoadSection(genpy.Message):
  _md5sum = "e564107726b89210b4492752f37581d9"
  _type = "mapdata/RoadSection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# If you're standing on the road looking towards the intersection, the left
# position is the leftmost edge of the rectangle closest to the intersection.
#    |       |
#    |       |
#  right    left
# ---+       +----
#
Position left
Position right

# How far the road section extends from the intersection
int32 length

# How far from the intersection the cars should stop
int32 stopline_offset

# Enumeration (just constants) of priority signs
uint8 PRIORITY_ROAD=0
uint8 GIVE_WAY=1
uint8 STOP_SIGN=2
uint8 TRAFFIC_LIGHT=3
uint8 BOOKING=4

uint8 priority_sign

# A bit redundant but nice for pretty printing
string name

================================================================================
MSG: mapdata/Position
int32 x
int32 y
"""
  # Pseudo-constants
  PRIORITY_ROAD = 0
  GIVE_WAY = 1
  STOP_SIGN = 2
  TRAFFIC_LIGHT = 3
  BOOKING = 4

  __slots__ = ['left','right','length','stopline_offset','priority_sign','name']
  _slot_types = ['mapdata/Position','mapdata/Position','int32','int32','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left,right,length,stopline_offset,priority_sign,name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoadSection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.left is None:
        self.left = mapdata.msg.Position()
      if self.right is None:
        self.right = mapdata.msg.Position()
      if self.length is None:
        self.length = 0
      if self.stopline_offset is None:
        self.stopline_offset = 0
      if self.priority_sign is None:
        self.priority_sign = 0
      if self.name is None:
        self.name = ''
    else:
      self.left = mapdata.msg.Position()
      self.right = mapdata.msg.Position()
      self.length = 0
      self.stopline_offset = 0
      self.priority_sign = 0
      self.name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6iB().pack(_x.left.x, _x.left.y, _x.right.x, _x.right.y, _x.length, _x.stopline_offset, _x.priority_sign))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left is None:
        self.left = mapdata.msg.Position()
      if self.right is None:
        self.right = mapdata.msg.Position()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.left.x, _x.left.y, _x.right.x, _x.right.y, _x.length, _x.stopline_offset, _x.priority_sign,) = _get_struct_6iB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6iB().pack(_x.left.x, _x.left.y, _x.right.x, _x.right.y, _x.length, _x.stopline_offset, _x.priority_sign))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left is None:
        self.left = mapdata.msg.Position()
      if self.right is None:
        self.right = mapdata.msg.Position()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.left.x, _x.left.y, _x.right.x, _x.right.y, _x.length, _x.stopline_offset, _x.priority_sign,) = _get_struct_6iB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6iB = None
def _get_struct_6iB():
    global _struct_6iB
    if _struct_6iB is None:
        _struct_6iB = struct.Struct("<6iB")
    return _struct_6iB
