// Generated by gencpp from file mapdata/GetIntersectionResponse.msg
// DO NOT EDIT!


#ifndef MAPDATA_MESSAGE_GETINTERSECTIONRESPONSE_H
#define MAPDATA_MESSAGE_GETINTERSECTIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mapdata/RoadSection.h>
#include <mapdata/RoadSection.h>
#include <mapdata/RoadSection.h>
#include <mapdata/RoadSection.h>

namespace mapdata
{
template <class ContainerAllocator>
struct GetIntersectionResponse_
{
  typedef GetIntersectionResponse_<ContainerAllocator> Type;

  GetIntersectionResponse_()
    : north()
    , west()
    , south()
    , east()  {
    }
  GetIntersectionResponse_(const ContainerAllocator& _alloc)
    : north(_alloc)
    , west(_alloc)
    , south(_alloc)
    , east(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mapdata::RoadSection_<ContainerAllocator>  _north_type;
  _north_type north;

   typedef  ::mapdata::RoadSection_<ContainerAllocator>  _west_type;
  _west_type west;

   typedef  ::mapdata::RoadSection_<ContainerAllocator>  _south_type;
  _south_type south;

   typedef  ::mapdata::RoadSection_<ContainerAllocator>  _east_type;
  _east_type east;





  typedef boost::shared_ptr< ::mapdata::GetIntersectionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mapdata::GetIntersectionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetIntersectionResponse_

typedef ::mapdata::GetIntersectionResponse_<std::allocator<void> > GetIntersectionResponse;

typedef boost::shared_ptr< ::mapdata::GetIntersectionResponse > GetIntersectionResponsePtr;
typedef boost::shared_ptr< ::mapdata::GetIntersectionResponse const> GetIntersectionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mapdata::GetIntersectionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mapdata::GetIntersectionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mapdata::GetIntersectionResponse_<ContainerAllocator1> & lhs, const ::mapdata::GetIntersectionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.north == rhs.north &&
    lhs.west == rhs.west &&
    lhs.south == rhs.south &&
    lhs.east == rhs.east;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mapdata::GetIntersectionResponse_<ContainerAllocator1> & lhs, const ::mapdata::GetIntersectionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mapdata

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mapdata::GetIntersectionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mapdata::GetIntersectionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapdata::GetIntersectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapdata::GetIntersectionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapdata::GetIntersectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapdata::GetIntersectionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mapdata::GetIntersectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05e0de0c4f7d86e84748f13d311cd03e";
  }

  static const char* value(const ::mapdata::GetIntersectionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05e0de0c4f7d86e8ULL;
  static const uint64_t static_value2 = 0x4748f13d311cd03eULL;
};

template<class ContainerAllocator>
struct DataType< ::mapdata::GetIntersectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mapdata/GetIntersectionResponse";
  }

  static const char* value(const ::mapdata::GetIntersectionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mapdata::GetIntersectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# For our purposes a 4-way intersection is enough\n"
"RoadSection north\n"
"RoadSection west\n"
"RoadSection south\n"
"RoadSection east\n"
"\n"
"================================================================================\n"
"MSG: mapdata/RoadSection\n"
"# If you're standing on the road looking towards the intersection, the left\n"
"# position is the leftmost edge of the rectangle closest to the intersection.\n"
"#    |       |\n"
"#    |       |\n"
"#  right    left\n"
"# ---+       +----\n"
"#\n"
"Position left\n"
"Position right\n"
"\n"
"# How far the road section extends from the intersection\n"
"int32 length\n"
"\n"
"# How far from the intersection the cars should stop\n"
"int32 stopline_offset\n"
"\n"
"# Enumeration (just constants) of priority signs\n"
"uint8 PRIORITY_ROAD=0\n"
"uint8 GIVE_WAY=1\n"
"uint8 STOP_SIGN=2\n"
"uint8 TRAFFIC_LIGHT=3\n"
"uint8 BOOKING=4\n"
"\n"
"uint8 priority_sign\n"
"\n"
"# A bit redundant but nice for pretty printing\n"
"string name\n"
"\n"
"================================================================================\n"
"MSG: mapdata/Position\n"
"int32 x\n"
"int32 y\n"
;
  }

  static const char* value(const ::mapdata::GetIntersectionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mapdata::GetIntersectionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.north);
      stream.next(m.west);
      stream.next(m.south);
      stream.next(m.east);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetIntersectionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mapdata::GetIntersectionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mapdata::GetIntersectionResponse_<ContainerAllocator>& v)
  {
    s << indent << "north: ";
    s << std::endl;
    Printer< ::mapdata::RoadSection_<ContainerAllocator> >::stream(s, indent + "  ", v.north);
    s << indent << "west: ";
    s << std::endl;
    Printer< ::mapdata::RoadSection_<ContainerAllocator> >::stream(s, indent + "  ", v.west);
    s << indent << "south: ";
    s << std::endl;
    Printer< ::mapdata::RoadSection_<ContainerAllocator> >::stream(s, indent + "  ", v.south);
    s << indent << "east: ";
    s << std::endl;
    Printer< ::mapdata::RoadSection_<ContainerAllocator> >::stream(s, indent + "  ", v.east);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAPDATA_MESSAGE_GETINTERSECTIONRESPONSE_H
