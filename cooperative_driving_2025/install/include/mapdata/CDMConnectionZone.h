// Generated by gencpp from file mapdata/CDMConnectionZone.msg
// DO NOT EDIT!


#ifndef MAPDATA_MESSAGE_CDMCONNECTIONZONE_H
#define MAPDATA_MESSAGE_CDMCONNECTIONZONE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mapdata/Position.h>

namespace mapdata
{
template <class ContainerAllocator>
struct CDMConnectionZone_
{
  typedef CDMConnectionZone_<ContainerAllocator> Type;

  CDMConnectionZone_()
    : pos()
    , width(0)
    , height(0)  {
    }
  CDMConnectionZone_(const ContainerAllocator& _alloc)
    : pos(_alloc)
    , width(0)
    , height(0)  {
  (void)_alloc;
    }



   typedef  ::mapdata::Position_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::mapdata::CDMConnectionZone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mapdata::CDMConnectionZone_<ContainerAllocator> const> ConstPtr;

}; // struct CDMConnectionZone_

typedef ::mapdata::CDMConnectionZone_<std::allocator<void> > CDMConnectionZone;

typedef boost::shared_ptr< ::mapdata::CDMConnectionZone > CDMConnectionZonePtr;
typedef boost::shared_ptr< ::mapdata::CDMConnectionZone const> CDMConnectionZoneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mapdata::CDMConnectionZone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mapdata::CDMConnectionZone_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mapdata::CDMConnectionZone_<ContainerAllocator1> & lhs, const ::mapdata::CDMConnectionZone_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mapdata::CDMConnectionZone_<ContainerAllocator1> & lhs, const ::mapdata::CDMConnectionZone_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mapdata

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mapdata::CDMConnectionZone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mapdata::CDMConnectionZone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapdata::CDMConnectionZone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapdata::CDMConnectionZone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapdata::CDMConnectionZone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapdata::CDMConnectionZone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mapdata::CDMConnectionZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49ee6d673b89f273a2281d8ddb4755f9";
  }

  static const char* value(const ::mapdata::CDMConnectionZone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49ee6d673b89f273ULL;
  static const uint64_t static_value2 = 0xa2281d8ddb4755f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::mapdata::CDMConnectionZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mapdata/CDMConnectionZone";
  }

  static const char* value(const ::mapdata::CDMConnectionZone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mapdata::CDMConnectionZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Position pos\n"
"uint32 width\n"
"uint32 height\n"
"\n"
"================================================================================\n"
"MSG: mapdata/Position\n"
"int32 x\n"
"int32 y\n"
;
  }

  static const char* value(const ::mapdata::CDMConnectionZone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mapdata::CDMConnectionZone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.width);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CDMConnectionZone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mapdata::CDMConnectionZone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mapdata::CDMConnectionZone_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::mapdata::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAPDATA_MESSAGE_CDMCONNECTIONZONE_H
